import{BigNumber as o,ethers as f,utils as t}from"ethers";const e=o.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),s=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,167,173,179,181,191,193,199,203,207,211,227,233,239,251,257,263,269,281,293,307,311,317,337,347,353,359,379,389,401,409,419,431,443,449,461,467,479,487,491,499,503];console.log(e),(new class{constructor(){this.publicAddress=void 0,this.mnemonic=void 0,this.polynomialS=void 0,this.polynomialA1=void 0;const t=f.Wallet.createRandom();console.log(t),this.publicAddress=t.address,this.mnemonic=t.mnemonic.phrase,this.polynomialS=o.from(t.privateKey),this.polynomialA1=this.randomNumber()}replaceWallet(t){const e=new f.Wallet(t);this.publicAddress=e.address,this.mnemonic=null,this.polynomialS=o.from(t),this.polynomialA1=this.randomNumber()}randomNumber(){return o.from(t.randomBytes(32))}findY(o){return this.polynomialS.add(o.mul(this.polynomialA1))}createShares(f){let t=[];for(let e=0;e<f;e++)t=[...t,{x:o.from(s[e]),y:this.findY(o.from(s[e]))}];return t}reconstructPrivateKey(o,f){return o.y.mul(f.x).div(f.x.sub(o.x)).add(f.y.mul(o.x).div(o.x.sub(f.x))).mod(e)}test(){console.log("private key: ",this.polynomialS);const o=this.createShares(5);console.log(o);const f=this.reconstructPrivateKey(o[0],o[1]);console.log("reconstruct private key 12: ",f);const t=this.reconstructPrivateKey(o[0],o[4]);console.log("reconstruct private key 14: ",t);const e=this.reconstructPrivateKey(o[3],o[4]);console.log("reconstruct private key 45: ",e)}}).test();
